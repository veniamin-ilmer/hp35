<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=0.8"> 
    <title>HP-35 Emulator - First scientific pocket calculator from 1972</title>
    <style>
    .monospace {
      font-family: monaco,monospace;
    }
    .monospace button {
      font-family: monaco,monospace;
    }
    .label {
      font-family: monaco,monospace;
      font-size:19px;
      color: #DDD;
    }
    
    body {background-color:#555; color: #DDD}
    a {background-color:#555; color: #DDD}
    
    td { text-align: center; white-space: nowrap; }
    th { white-space: nowrap; }
    #keyboard td { padding:0; width:35px; height: 35px }
    #numbers td { padding:0; width: 555px; }
    button { width: 100%; height: 100%; font-size: 14px }
    #numbers button { font-size:22px; background-color: #DDA }
    .operation { font-size:22px }
    .cyan { background-color: #0AF; color: #DDD }
    .cyan:hover { background-color: #08E}
    .black { background-color: #444; color: #DDD }
    .black:hover { background-color: #222 }
    .gray { background-color: #888; color: #DDD }
    .gray:hover { background-color: #666 }
    
    th { user-select: none }
    
    #display {
      color: red;
      background-color: black;
      font-size:40px;
      white-space: pre-wrap
    }
    
    #digits {
      margin:0;
    }
    
    table#keyboard {
      user-select: none;
    }
    
    .desktoponly {display:display;}

    @media only screen and (max-width: 900px) {
    .desktoponly {display:none;}
    .main_flex {flex-direction: column}
    }

    .tiny {
      font-size:6px;
    }
    </style>
    <script type="module">
    /*
    // Import our outputted wasm ES6 module
    // Which, export default's, an initialization function
    import init from "./pkg/hp35.js";
//    const runWasm = async () => {
      // Instantiate our wasm module
    const wasm = await init("./pkg/hp35_bg.wasm");
    wasm.run();
*/
      import init from "./pkg/hp35.js";
      const wasm = await init();
      wasm.run();
    </script>
    
    <script>
    pendingClicks = [];
    //Map out all of the button clicks.
    window.addEventListener("load", function() {
      const keyboard = document.getElementById("keyboard");
      const tbody = keyboard.children[0];
      for(let i = 0; i < tbody.children.length; i++) {
        const tr = tbody.children[i];
        for(let j = 0; j < tr.children.length; j++) {
          const td = tr.children[j];
          const button = td.children[0];
          if(button) {
            button.addEventListener("mousedown", function(e) {
              pendingClicks.push(parseInt(button.getAttribute('code')));
            });
          }
        }
      }
      const numbers = document.getElementById("numbers");
      const tbody1 = numbers.children[0];
      for(let i = 0; i < tbody1.children.length; i++) {
        const tr = tbody1.children[i];
        for(let j = 0; j < tr.children.length; j++) {
          const td = tr.children[j];
          const button = td.children[0];
          if(button) {
            button.addEventListener("mousedown", function(e) {
              pendingClicks.push(parseInt(button.getAttribute('code')));
            });
          }
        }
      }
      
      document.onkeydown = function (e) {
        e = e || window.event;
        if(e.keyCode == 27) { //ESC
          pendingClicks.push(-1);
        } else if(e.keyCode == 61 | e.keyCode == 13) { //=
          pendingClicks.push(62);
        } else if(e.keyCode == 48 || e.keyCode == 96) { //0
          pendingClicks.push(30);
        } else if(e.keyCode == 49 || e.keyCode == 97) { //1
          pendingClicks.push(28);
        } else if(e.keyCode == 50 || e.keyCode == 98) { //2
          pendingClicks.push(27);
        } else if(e.keyCode == 51 || e.keyCode == 99) { //3
          pendingClicks.push(26);
        } else if(e.keyCode == 52 || e.keyCode == 100) { //4
          pendingClicks.push(20);
        } else if(e.keyCode == 53 || e.keyCode == 101) { //5
          pendingClicks.push(19);
        } else if(e.keyCode == 54 || e.keyCode == 102) { //6
          pendingClicks.push(18);
        } else if(e.keyCode == 55 || e.keyCode == 103) { //7
          pendingClicks.push(52);
        } else if(e.keyCode == 56 || e.keyCode == 104) { //8
          pendingClicks.push(51);
        } else if(e.keyCode == 57 || e.keyCode == 105) { //9
          pendingClicks.push(50);
        } else if(e.keyCode == 80) { //PI
          pendingClicks.push(34);
        } else if(e.keyCode == 45 || e.keyCode == 109) { //-
          pendingClicks.push(54);
        } else if(e.keyCode == 42 || e.keyCode == 106) { //*
          pendingClicks.push(30);
        } else if(e.keyCode == 43 || e.keyCode == 107) { //+
          pendingClicks.push(22);
        } else if(e.keyCode == 190 || e.keyCode == 110) { //.
          pendingClicks.push(35);
        } else if(e.keyCode == 47 || e.keyCode == 111) { //divide
          pendingClicks.push(38); event.preventDefault(); return false;
        }
      };
      
    }, false);

    //This function will be called by the WASM code.
    function getPendingClick() {
      let pending = pendingClicks.shift();
      if(pending) {
        return pending;
      }
    }
    </script>
  </head>
  <body>
  <div style="display: flex" class="main_flex">
    <aside class="monospace desktoponly">
    <table id="anr">
      <tr><th>A & R</th><th></th><th>Sign</th><th colspan=10>Mantissa</th><th colspan=3>Exponent</th>
      <tr><th>Register A</th><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
      <tr><th>Register B</th><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
      <tr><th>Register C</th><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
      <tr><th>Register D</th><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
      <tr><th>Register E</th><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
      <tr><th>Register F</th><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
      <tr><th>Register M</th><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
    </table>
    <div style="height:15px"></div>
    <table id="cnt">
      <tr><th>C & T</th></tr>
      <tr><th>Current Address</th><td>0000</td></tr>
      <tr><th>Return Address</th><td>0000</td></tr>
      <tr><th>Pointer</th><td>0</td></tr>
    </table>
    <table id="status">
      <tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th></tr>
      <tr><th>Status</th><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td></tr>
    </table>
    </aside>
    <article style="flex: 1; display:flex; flex-direction: column; align-items: center; padding-right: 20px">
      <div id="display" class="monospace">               </div>
      <div>
        <table id="keyboard">
          <tr valign="bottom" class="label"><td><label for="power"><i>x<sup>y</sup></i></label></td><td></td><td><label for="log">log</label></td><td></td><td><label for="ln">ln</label></td><td></td><td><label for="ex"><i>e<sup>x</sup></i></label></td><td></td><td><label for="clr">CLR</label></td></tr>
          <tr><td><button class="black" code="6" id="power"></button></td><td></td><td><button class="black" code="4" id="log"></button></td><td></td><td><button class="black" code="3" id="ln"></button></td><td></td><td><button class="black" code="2" id="ex"></button></td><td></td><td><button code="-1" class="cyan" id="clr"></button></td></tr>
          <tr valign="bottom" class="label"><td><label for="sqrt"><i>√<span style="text-decoration:overline;">x</span></i></label></td><td></td><td><label for="arc">arc</label></td><td></td><td><label for="sin">sin</label></td><td></td><td><label for="cos">cos</label></td><td></td><td><label for="tan">tan</label></td></tr>
          <tr><td><button code="46" id="sqrt" class="black"></button></td><td></td><td><button code="44" id="arc" class="gray"></button></td><td></td><td><button code="43" id="sin" class="gray"></button></td><td></td><td><button code="42" id="cos" class="gray"></button></td><td></td><td><button code="40" id="tan" class="gray"></button></td></tr>
          <tr valign="bottom" class="label"><td><label for="inverse">1/<i>x</i></label></td><td></td><td><label for="xchg"><i>x<span style="font-size:16px">&#x21C4;</span>y</i></label></td><td></td><td><label for="rdown">R↓</label></td><td></td><td><label for="sto">STO</label></td><td></td><td><label for="rcl">RCL</label></td></tr>
          <tr><td><button code="14" id="inverse" class="black"></button></td><td></td><td><button code="12" id="xchg" class="black"></button></td><td></td><td><button code="11" id="rdown" class="black"></button></td><td></td><td><button code="10" id="sto" class="black"></button></td><td></td><td><button code="8" id="rcl" class="black"></button></td></tr>
          <tr valign="bottom" class="label"><td></td><td></td><td></td><td></td><td><label for="chs">CH<span class="tiny"> </span>S</label></td><td></td><td><label for="eex">E<span class="tiny"> </span>EX</label></td><td></td><td><label for="clx">CL<span class="tiny"> </span><i>X</i></label></td></tr>
          <tr><td colspan=3><button code="62" class="cyan monospace" style="font-size:20px">ENTER↑</button></td><td></td><td><button code="59" class="cyan" id="chs"></button></td><td></td><td><button code="58" class="cyan" id="eex"></button></td><td></td><td><button code="56" class="cyan" id="clx"></button></td></tr>
          <tr><td></td></tr>
          <tr><td><button code="54" class="cyan operation">&minus;</button></td><td></td><td colspan=7 rowspan=7>
            <table id="numbers">
              <tr><td><button code="52">7</button></td><td></td><td><button code="51">8</button></td><td></td><td><button code="50">9</button></td></tr>
              <tr><td></td></tr>
              <tr><td><button code="20">4</button></td><td></td><td><button code="19">5</button></td><td></td><td><button code="18">6</button></td></tr>
              <tr><td></td></tr>
              <tr><td><button code="28">1</button></td><td></td><td><button code="27">2</button></td><td></td><td><button code="26">3</button></td></tr>
              <tr><td></td></tr>
              <tr><td><button code="36">0</button></td><td></td><td><button code="35">.</button></td><td></td><td><button code="34" style="font-size:28px; line-height:0; padding-top:0px;padding-bottom:5px">𝜋</button></td></tr>
            </table>
            </td>
          </tr>
          <tr><td></td></tr>
          <tr><td><button code="22" class="cyan operation">&plus;</button></td><td></td>
          <tr><td></td></tr>
          <tr><td><button code="30" class="cyan operation">&times;</button></td><td></td>
          <tr><td></td></tr>
          <tr><td><button code="38" class="cyan operation">&divide;</button></td><td></td>
          <tr><td></td></tr>
        </table>
      </div>
      <div style="font-size:24px; user-select: none" class="monospace">HEWLETT•PACKARD 35</div>
    </article>
    <aside style="flex: 1">
      <h4>How to use</h4>
      The HP-35 used Reverse Polish Notation (RPN). You press the operation after inputting both numbers.
      <ol>
        <li>Start out by typing a few numbers. Example: <span class="monospace">1 2 3</span></li>
        <li>Press ENTER↑</li>
        <li>Type in a few more numbers: <span class="monospace">4 5 6</span></li>
        <li>Press the operation, Example: <span class="monospace">+</span></li>
      </ol>

      <h4>What is this?</h4>
      This is an emulation of the <a href="https://en.wikipedia.org/wiki/HP-35">HP-35</a>, the world's first scientific pocket calculator from 1972, running on two different CPUS - the HP Control &amp; Timing chip and the HP Arithmetic &amp; Register chip.
      Alongside the two CPUs there are 3 ROM chips, a keyboard and a display, all being emulated with perfect synchronization.

      <h4>Source code</h4>

      It is my dream to build a chip library for anyone to be able to emulate any chip or board. Therefore, the code is subdivided into several layers of emulation:<br />
      
      <ul>
        <li><a href="https://github.com/veniamin-ilmer/hp35">HP35 GUI</a></li>
        <li><a href="https://github.com/veniamin-ilmer/boards">Boards library</a></li>
        <li><a href="https://github.com/veniamin-ilmer/chips">Chips library</a></li>
      </ul>

      <h4>Acknowledgments / Resources</h4>
      This emulation would be lacking without the resources below:<br />
      <ul>
        <li><a href="https://archived.hpcalc.org/laporte/HP%2035%20Saga.htm">Jacques Laporte's HP-35 documentation</a></li>
        <li><a href="https://patentimages.storage.googleapis.com/44/5c/ab/197897f4ecaacb/US4001569.pdf">The HP-35 patent</a></li>
      </ul>
    </aside>
  </div>
  
  </body>
</html>
